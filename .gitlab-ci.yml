stages:
  - lint
  # - unitTest
  - build
  - integrationTest
  - deployStaging

variables:
  AMZ_REGISTRY: 292374005836.dkr.ecr.ap-southeast-2.amazonaws.com
  GITLAB_REGISTRY: registry.gitlab.com/rflett/containers

flake8:
  stage: lint
  allow_failure: true
  image: $GITLAB_REGISTRY/python:latest
  script:
    - flake8 src/

# unitTest:
#   stage: unitTest
#   image: $GITLAB_REGISTRY/python:latest
#   script:
#     - cd src/
#     - pipenv install
#     - pipenv run python -m pytest

build:
  stage: build
  image: $GITLAB_REGISTRY/docker:latest
  services:
    - docker:dind
  tags:
    - docker
  script:
    # docker-login to ecr
    - eval $(aws ecr get-login --no-include-email)
    # build, tag, and push commit
    - docker build -t $AMZ_REGISTRY/api:$CI_COMMIT_SHA src/
    - docker push $AMZ_REGISTRY/api:$CI_COMMIT_SHA
    # tag and push latest
    - docker tag $AMZ_REGISTRY/api:$CI_COMMIT_SHA $AMZ_REGISTRY/api:latest
    - docker push $AMZ_REGISTRY/api:latest

integrationTest:
  stage: integrationTest
  image: $GITLAB_REGISTRY/docker:latest
  allow_failure: true
  services:
    - docker:dind
  tags:
    - docker
  script:
    # docker-login to ecr
    - eval $(aws ecr get-login --no-include-email)

    # start services
    - docker run -d -p 5432:5432 --name postgres $AMZ_REGISTRY/postgres:latest
    - docker run -d -p 5000:5000 --build-arg APP_ENV=Ci --name api --link postgres:postgres $AMZ_REGISTRY/api:latest

    # run tests
    - docker run -it --link api:api $GITLAB_REGISTRY/newman:latest newman run src/tests/integration.postman_collection.json

deployStaging:
  stage: deployStaging
  image: $GITLAB_REGISTRY/python:latest
  tags:
    - docker
  script:
    - python deploy/deploy.py api staging
